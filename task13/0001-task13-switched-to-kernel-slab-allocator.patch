From 1944eb59ed44f339e18fce74e003394a35c60a8a Mon Sep 17 00:00:00 2001
From: Jonathan Bowie <eudjtb@gmail.com>
Date: Thu, 2 Mar 2017 14:18:16 -0800
Subject: [PATCH] task13: switched to kernel slab allocator

Signed-off-by: Jonathan Bowie <eudjtb@gmail.com>
---
 task13/namelist.c | 25 ++++++++++++++-----------
 1 file changed, 14 insertions(+), 11 deletions(-)

diff --git a/task13/namelist.c b/task13/namelist.c
index fff7d4d..1f4ae5c 100644
--- a/task13/namelist.c
+++ b/task13/namelist.c
@@ -5,13 +5,14 @@
 #include "namelist.h"
 
 static struct identity idlist;
+static struct kmem_cache *cache_pool;
 
 static struct identity *identity_find(int id)
 {
 	struct identity *tmp;
 
 	list_for_each_entry(tmp, &idlist.list, list) {
-		if(tmp->id == id)
+		if (tmp->id == id)
 			return tmp;
 	}
 
@@ -22,15 +23,15 @@ static int identity_create(const char *name, int id)
 {
 	struct identity *newid;
 
-	newid = kmalloc(sizeof(struct identity), GFP_KERNEL);
-	if (!newid) 
+	newid = kmem_cache_alloc(cache_pool, GFP_KERNEL);
+	if (!newid)
 		return -ENOMEM;
 
 	strncpy((char *)&(newid->name), name, sizeof(newid->name));
 	newid->id = id;
 	newid->busy = 0;
 
-	list_add(&(newid->list), &idlist.list); 
+	list_add(&(newid->list), &idlist.list);
 
 	return 0;
 }
@@ -44,9 +45,7 @@ static void identity_del(int id)
 		return;
 
 	list_del(&(tmp->list));
-	kfree(tmp);
-
-	return;
+	kmem_cache_free(cache_pool, tmp);
 }
 
 int namelist_init(void)
@@ -55,13 +54,16 @@ int namelist_init(void)
 	int i;
 	int ret;
 
+	cache_pool = kmem_cache_create("eudyptula", sizeof(struct identity),
+					0, SLAB_RED_ZONE, NULL);
+
 	INIT_LIST_HEAD(&idlist.list);
 
 	ret = identity_create("Alice", 1);
-	if (ret < 0) 
+	if (ret < 0)
 		pr_debug("Identity creation failed: %d\n", ret);
 	ret = identity_create("Bob", 2);
-	if (ret < 0) 
+	if (ret < 0)
 		pr_debug("Identity creation failed: %d\n", ret);
 	ret = identity_create("Dave", 3);
 	if (ret < 0)
@@ -70,7 +72,7 @@ int namelist_init(void)
 	if (ret < 0)
 		pr_debug("Identity creation failed: %d\n", ret);
 
-	for (i=1; i <= 10; i++) {
+	for (i = 1; i <= 10; i++) {
 		tmp = identity_find(i);
 		if (tmp)
 			pr_debug("id %d = %s\n", tmp->id, tmp->name);
@@ -82,7 +84,7 @@ int namelist_init(void)
 	 * Ideally we should also implement a cleanup function which iterates
 	 * through the list with list_for_each_safe() and destroys outstanding
 	 * items in the list.  Since we are "self-managing" the list in this
-	 * exercise it's unnecessary; but, it is a good idea in general 
+	 * exercise it's unnecessary; but, it is a good idea in general
 	 * practice.
 	 */
 
@@ -98,6 +100,7 @@ int namelist_init(void)
 void namelist_exit(void)
 {
 	pr_debug("I hate to see you leave, but...\n");
+	kmem_cache_destroy(cache_pool);
 }
 
 module_init(namelist_init);
-- 
2.7.4

